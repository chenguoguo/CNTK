//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

#pragma once

#include <iostream>
#include <vector>
#include <utility>

// first string in the pair corresponds to BrainScript line to be parsed, second string is the expected tree string after parsed
extern const std::vector<std::pair<std::wstring, std::wstring>> parserTestVector{
    std::make_pair(// #0
    L"do = Parameter(13,42) * Input(42) + Parameter(13,1)",
    L" []\n"
    L" do =\n"
    L"  +\n"
    L"   *\n"
    L"    (\n"
    L"     Parameter\n"
    L"     ()\n"
    L"      13\n"
    L"      42\n"
    L"\n"
    L"\n"
    L"    (\n"
    L"     Input\n"
    L"     ()\n"
    L"      42\n"
    L"\n"
    L"\n"
    L"\n"
    L"   (\n"
    L"    Parameter\n"
    L"    ()\n"
    L"     13\n"
    L"     1\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #1
    L"do = Print(array [1..10] (i=>i*i))",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    array \n"
    L"     1\n"
    L"     10\n"
    L"     =>\n"
    L"      ()\n"
    L"       i\n"
    L"\n"
    L"      *\n"
    L"       i\n"
    L"       i\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #2
    L"do = new PrintAction [ what = 'abc' ]",
    L" []\n"
    L" do =\n"
    L"  new PrintAction\n"
    L"   []\n"
    L"    what =\n"
    L"     'abc'\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #3
    L"do = Print(new StringFunction [ x = 13 ; y = 42 ; what = 'Format' ; how = '.2' ; arg = x*y ])",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    new StringFunction\n"
    L"     []\n"
    L"      arg =\n"
    L"       *\n"
    L"        x\n"
    L"        y\n"
    L"\n"
    L"      how =\n"
    L"       '.2'\n"
    L"      what =\n"
    L"       'Format'\n"
    L"      x =\n"
    L"       13\n"
    L"      y =\n"
    L"       42\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #4
    L"do = Print(\"new StringFunction [ what = 'Format' ; how = '.2' ; arg = '13 > 42' ]\")",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    'new StringFunction [ what = 'Format' ; how = '.2' ; arg = '13 > 42' ]'\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #5
    L"do = new PrintAction [ what = if 13 > 42 || 12 > 1 then 'Hello World' + \"!\" else 'Oops?']",
    L" []\n"
    L" do =\n"
    L"  new PrintAction\n"
    L"   []\n"
    L"    what =\n"
    L"     if\n"
    L"      ||\n"
    L"       >\n"
    L"        13\n"
    L"        42\n"
    L"\n"
    L"       >\n"
    L"        12\n"
    L"        1\n"
    L"\n"
    L"\n"
    L"      +\n"
    L"       'Hello World'\n"
    L"       '!'\n"
    L"\n"
    L"      'Oops?'\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #6
    L"i2s(i) = new StringFunction [ what = 'Format' ; arg = i ; how = '.2' ] ; do = Print('result=' + i2s((( [ v = (i => i + delta"L") ].v(5)))+13)) ; delta = 42 ",
    L" []\n"
    L" delta =\n"
    L"  42\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    +\n"
    L"     'result='\n"
    L"     (\n"
    L"      i2s\n"
    L"      ()\n"
    L"       +\n"
    L"        (\n"
    L"         . v\n"
    L"          []\n"
    L"           v =\n"
    L"            =>\n"
    L"             ()\n"
    L"              i\n"
    L"\n"
    L"             +\n"
    L"              i\n"
    L"              delta\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"         ()\n"
    L"          5\n"
    L"\n"
    L"\n"
    L"        13\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L" i2s =\n"
    L"  =>\n"
    L"   ()\n"
    L"    i\n"
    L"\n"
    L"   new StringFunction\n"
    L"    []\n"
    L"     arg =\n"
    L"      i\n"
    L"     how =\n"
    L"      '.2'\n"
    L"     what =\n"
    L"      'Format'\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #7
    L"do = Print(1+2*3) : Print('hello'+' world')",
    L" []\n"
    L" do =\n"
    L"  :\n"
    L"   (\n"
    L"    Print\n"
    L"    ()\n"
    L"     +\n"
    L"      1\n"
    L"      *\n"
    L"       2\n"
    L"       3\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"   (\n"
    L"    Print\n"
    L"    ()\n"
    L"     +\n"
    L"      'hello'\n"
    L"      ' world'\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #8
    L"do = Print(Format( (13:(fortytwo:1):100), '')) ; fortytwo=42 ",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    (\n"
    L"     Format\n"
    L"     ()\n"
    L"      :\n"
    L"       13\n"
    L"       :\n"
    L"        fortytwo\n"
    L"        1\n"
    L"\n"
    L"       100\n"
    L"\n"
    L"      ''\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L" fortytwo =\n"
    L"  42\n"
    L"\n"
    L""),
    std::make_pair(// #9
    L"do = Print(val) ; val=if !false then 42 else -+-++-13:[a='a';b=42]:+14; arr = array [1..10] (i => 2*i)",
    L" []\n"
    L" arr =\n"
    L"  array \n"
    L"   1\n"
    L"   10\n"
    L"   =>\n"
    L"    ()\n"
    L"     i\n"
    L"\n"
    L"    *\n"
    L"     2\n"
    L"     i\n"
    L"\n"
    L"\n"
    L"\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" val =\n"
    L"  if\n"
    L"   !(\n"
    L"    0\n"
    L"\n"
    L"   42\n"
    L"   :\n"
    L"    -(\n"
    L"     +(\n"
    L"      -(\n"
    L"       +(\n"
    L"        +(\n"
    L"         -(\n"
    L"          13\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"    []\n"
    L"     a =\n"
    L"      'a'\n"
    L"     b =\n"
    L"      42\n"
    L"\n"
    L"    +(\n"
    L"     14\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #10
    L"do = Print(arg) ; N = 5 ; arr = array [1..N] (i => if i < N then arr[i+1]*i else N) ; arg = arr ",
    L" []\n"
    L" N =\n"
    L"  5\n"
    L" arg =\n"
    L"  arr\n"
    L" arr =\n"
    L"  array \n"
    L"   1\n"
    L"   N\n"
    L"   =>\n"
    L"    ()\n"
    L"     i\n"
    L"\n"
    L"    if\n"
    L"     <\n"
    L"      i\n"
    L"      N\n"
    L"\n"
    L"     *\n"
    L"      [\n"
    L"       arr\n"
    L"       +\n"
    L"        i\n"
    L"        1\n"
    L"\n"
    L"\n"
    L"      i\n"
    L"\n"
    L"     N\n"
    L"\n"
    L"\n"
    L"\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    arg\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #11
    L"do = Print(val) ; val = [ v = (i => i + offset) ].v(42) ; offset = 13 ",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" offset =\n"
    L"  13\n"
    L" val =\n"
    L"  (\n"
    L"   . v\n"
    L"    []\n"
    L"     v =\n"
    L"      =>\n"
    L"       ()\n"
    L"        i\n"
    L"\n"
    L"       +\n"
    L"        i\n"
    L"        offset\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"   ()\n"
    L"    42\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #12: DNN with recursion
    L"do = Print(val) \n"
    L"val = new NDLComputationNetwork [\n"
    L"  featDim=40*31 ; labelDim=9000 ; hiddenDim=2048 ; numHiddenLayers = 3 \n"
    L"  myFeatures = Input(featDim) ; myLabels = Input(labelDim) \n"
    L"  featNorm = MeanVarNorm(myFeatures) \n"
    L"  HiddenStack(layer) = if layer > 1 then SBFF(HiddenStack(layer - 1).Eh, hiddenDim, hiddenDim) else SBFF(featNorm, hiddenDim, featDim) \n"
    L"  outLayer = BFF(HiddenStack(numHiddenLayers).Eh, labelDim, hiddenDim) \n"
    L"  outZ = outLayer.z \n"
    L"  CE = CrossEntropyWithSoftmax(myLabels, outZ) \n"
    L"  Err = ErrorPrediction(myLabels, outZ) \n"
    L"  logPrior = LogPrior(myLabels) \n"
    L"  ScaledLogLikelihood = outZ - logPrior \n"
    L"]\n"
    L"",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" val =\n"
    L"  new NDLComputationNetwork\n"
    L"   []\n"
    L"    CE =\n"
    L"     (\n"
    L"      CrossEntropyWithSoftmax\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    Err =\n"
    L"     (\n"
    L"      ErrorPrediction\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    HiddenStack =\n"
    L"     =>\n"
    L"      ()\n"
    L"       layer\n"
    L"\n"
    L"      if\n"
    L"       >\n"
    L"        layer\n"
    L"        1\n"
    L"\n"
    L"       (\n"
    L"        SBFF\n"
    L"        ()\n"
    L"         . Eh\n"
    L"          (\n"
    L"           HiddenStack\n"
    L"           ()\n"
    L"            -\n"
    L"             layer\n"
    L"             1\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"         hiddenDim\n"
    L"         hiddenDim\n"
    L"\n"
    L"\n"
    L"       (\n"
    L"        SBFF\n"
    L"        ()\n"
    L"         featNorm\n"
    L"         hiddenDim\n"
    L"         featDim\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"    ScaledLogLikelihood =\n"
    L"     -\n"
    L"      outZ\n"
    L"      logPrior\n"
    L"\n"
    L"    featDim =\n"
    L"     *\n"
    L"      40\n"
    L"      31\n"
    L"\n"
    L"    featNorm =\n"
    L"     (\n"
    L"      MeanVarNorm\n"
    L"      ()\n"
    L"       myFeatures\n"
    L"\n"
    L"\n"
    L"    hiddenDim =\n"
    L"     2048\n"
    L"    labelDim =\n"
    L"     9000\n"
    L"    logPrior =\n"
    L"     (\n"
    L"      LogPrior\n"
    L"      ()\n"
    L"       myLabels\n"
    L"\n"
    L"\n"
    L"    myFeatures =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       featDim\n"
    L"\n"
    L"\n"
    L"    myLabels =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       labelDim\n"
    L"\n"
    L"\n"
    L"    numHiddenLayers =\n"
    L"     3\n"
    L"    outLayer =\n"
    L"     (\n"
    L"      BFF\n"
    L"      ()\n"
    L"       . Eh\n"
    L"        (\n"
    L"         HiddenStack\n"
    L"         ()\n"
    L"          numHiddenLayers\n"
    L"\n"
    L"\n"
    L"\n"
    L"       labelDim\n"
    L"       hiddenDim\n"
    L"\n"
    L"\n"
    L"    outZ =\n"
    L"     . z\n"
    L"      outLayer\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #13: factorial
    L"do = Print(fac(5)) ; fac(i) = if i > 1 then fac(i-1)*i else 1 ",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    (\n"
    L"     fac\n"
    L"     ()\n"
    L"      5\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L" fac =\n"
    L"  =>\n"
    L"   ()\n"
    L"    i\n"
    L"\n"
    L"   if\n"
    L"    >\n"
    L"     i\n"
    L"     1\n"
    L"\n"
    L"    *\n"
    L"     (\n"
    L"      fac\n"
    L"      ()\n"
    L"       -\n"
    L"        i\n"
    L"        1\n"
    L"\n"
    L"\n"
    L"\n"
    L"     i\n"
    L"\n"
    L"    1\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #14: Fibonacci sequence with memoization
    L"do = Print(fibs(10)) ; fibs(n) = [ vals = array[1..n] (i => if i < 3 then i-1 else vals[i-1]+vals[i-2]) ].vals[n] ",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    (\n"
    L"     fibs\n"
    L"     ()\n"
    L"      10\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L" fibs =\n"
    L"  =>\n"
    L"   ()\n"
    L"    n\n"
    L"\n"
    L"   [\n"
    L"    . vals\n"
    L"     []\n"
    L"      vals =\n"
    L"       array \n"
    L"        1\n"
    L"        n\n"
    L"        =>\n"
    L"         ()\n"
    L"          i\n"
    L"\n"
    L"         if\n"
    L"          <\n"
    L"           i\n"
    L"           3\n"
    L"\n"
    L"          -\n"
    L"           i\n"
    L"           1\n"
    L"\n"
    L"          +\n"
    L"           [\n"
    L"            vals\n"
    L"            -\n"
    L"             i\n"
    L"             1\n"
    L"\n"
    L"\n"
    L"           [\n"
    L"            vals\n"
    L"            -\n"
    L"             i\n"
    L"             2\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"    n\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #15: DNN with array
    L"do = Print(val) \n"
    L"val = new NDLComputationNetwork [\n"
    L"  featDim=40*31 ; labelDim=9000 ; hiddenDim=2048 ; numHiddenLayers = 3 \n"
    L"  myFeatures = Input(featDim, tag='features') ; myLabels = Input(labelDim, tag='labels') \n"
    L"  featNorm = MeanVarNorm(myFeatures) \n"
    L"  layers[layer:1..numHiddenLayers] = if layer > 1 then SBFF(layers[layer-1].Eh, hiddenDim, hiddenDim) else SBFF(featNorm, hiddenDim, featDim) \n"
    L"  outLayer = BFF(layers[numHiddenLayers].Eh, labelDim, hiddenDim) \n"
    L"  outZ = outLayer.z + Delay(outZ, 1) \n"
    L"  CE = CrossEntropyWithSoftmax(myLabels, outZ) \n"
    L"  Err = ErrorPrediction(myLabels, outZ) \n"
    L"  logPrior = LogPrior(myLabels) \n"
    L"  ScaledLogLikelihood = outZ - logPrior \n"
    L"]\n"
    L"",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" val =\n"
    L"  new NDLComputationNetwork\n"
    L"   []\n"
    L"    CE =\n"
    L"     (\n"
    L"      CrossEntropyWithSoftmax\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    Err =\n"
    L"     (\n"
    L"      ErrorPrediction\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    ScaledLogLikelihood =\n"
    L"     -\n"
    L"      outZ\n"
    L"      logPrior\n"
    L"\n"
    L"    featDim =\n"
    L"     *\n"
    L"      40\n"
    L"      31\n"
    L"\n"
    L"    featNorm =\n"
    L"     (\n"
    L"      MeanVarNorm\n"
    L"      ()\n"
    L"       myFeatures\n"
    L"\n"
    L"\n"
    L"    hiddenDim =\n"
    L"     2048\n"
    L"    labelDim =\n"
    L"     9000\n"
    L"    layers =\n"
    L"     array \n"
    L"      1\n"
    L"      numHiddenLayers\n"
    L"      =>\n"
    L"       ()\n"
    L"        layer\n"
    L"\n"
    L"       if\n"
    L"        >\n"
    L"         layer\n"
    L"         1\n"
    L"\n"
    L"        (\n"
    L"         SBFF\n"
    L"         ()\n"
    L"          . Eh\n"
    L"           [\n"
    L"            layers\n"
    L"            -\n"
    L"             layer\n"
    L"             1\n"
    L"\n"
    L"\n"
    L"\n"
    L"          hiddenDim\n"
    L"          hiddenDim\n"
    L"\n"
    L"\n"
    L"        (\n"
    L"         SBFF\n"
    L"         ()\n"
    L"          featNorm\n"
    L"          hiddenDim\n"
    L"          featDim\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"    logPrior =\n"
    L"     (\n"
    L"      LogPrior\n"
    L"      ()\n"
    L"       myLabels\n"
    L"\n"
    L"\n"
    L"    myFeatures =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       featDim\n"
    L"\n"
    L"       tag =\n"
    L"        'features'\n"
    L"\n"
    L"\n"
    L"    myLabels =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       labelDim\n"
    L"\n"
    L"       tag =\n"
    L"        'labels'\n"
    L"\n"
    L"\n"
    L"    numHiddenLayers =\n"
    L"     3\n"
    L"    outLayer =\n"
    L"     (\n"
    L"      BFF\n"
    L"      ()\n"
    L"       . Eh\n"
    L"        [\n"
    L"         layers\n"
    L"         numHiddenLayers\n"
    L"\n"
    L"\n"
    L"       labelDim\n"
    L"       hiddenDim\n"
    L"\n"
    L"\n"
    L"    outZ =\n"
    L"     +\n"
    L"      . z\n"
    L"       outLayer\n"
    L"\n"
    L"      (\n"
    L"       Delay\n"
    L"       ()\n"
    L"        outZ\n"
    L"        1\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(// #16: windowed RNN
    L"do = Print(val)                                                                                                           \n"
    L"val = new NDLComputationNetwork [                                                                                         \n"
    L"   hiddenDim = 512                                                                                                        \n"
    L"   numHiddenLayers = 2                                                                                                    \n"
    L"   T = 3                                  // total context window                                                         \n"
    L"                                                                                                                          \n"
    L"   // data sources                                                                                                        \n"
    L"   featDim = 40 ; labelDim = 9000                                                                                         \n"
    L"   myFeatures = Input(featDim) ; myLabels = Input(labelDim)                                                               \n"
    L"                                                                                                                          \n"
    L"   // split the augmented input vector into individual frame vectors                                                      \n"
    L"   subframes[t:0..T - 1] = RowSlice(t * featDim, featDim, myFeatures)                                                     \n"
    L"                                                                                                                          \n"
    L"   // hidden layers                                                                                                       \n"
    L"   layers[layer:1..numHiddenLayers] = [     // each layer stores a dict that stores its hidden fwd and bwd state vectors  \n"
    L"       // model parameters                                                                                                \n"
    L"       W_fwd = Parameter(hiddenDim, featDim)                                              // Parameter(outdim, indim)     \n"
    L"       W_bwd = if layer > 1 then Parameter(hiddenDim, hiddenDim) else Fail('no W_bwd')    // input-to-hidden              \n"
    L"       H_fwd = Parameter(hiddenDim, hiddenDim)                                            // hidden-to-hidden             \n"
    L"       H_bwd = Parameter(hiddenDim, hiddenDim)                                                                            \n"
    L"       b = Parameter(hiddenDim, 1)                                                        // bias                         \n"
    L"       // shared part of activations (input connections and bias)                                                         \n"
    L"       z_shared[t:0..T-1] = (if layer > 1                                                                                 \n"
    L"                             then W_fwd * layers[layer - 1].h_fwd[t] + W_bwd * layers[layer - 1].h_bwd[t]                 \n"
    L"                             else W_fwd * subframes[t]                                                                    \n"
    L"                            ) + b                                                                                         \n"
    L"       // recurrent part and non-linearity                                                                                \n"
    L"       step(H, h, dt, t) = Sigmoid(if (t + dt >= 0 && t + dt < T)                                                         \n"
    L"                                   then z_shared[t] + H * h[t + dt]                                                       \n"
    L"                                   else z_shared[t])                                                                      \n"
    L"       h_fwd[t:0..T-1] = step(H_fwd, h_fwd, -1, t)                                                                        \n"
    L"       h_bwd[t:0..T-1] = step(H_bwd, h_bwd,  1, t)                                                                        \n"
    L"   ]                                                                                                                      \n"
    L"   // output layer --linear only at this point; Softmax is applied later                                                  \n"
    L"   outLayer = [                                                                                                           \n"
    L"       // model parameters                                                                                                \n"
    L"       W_fwd = Parameter(labelDim, hiddenDim)                                                                             \n"
    L"       W_bwd = Parameter(labelDim, hiddenDim)                                                                             \n"
    L"       b = Parameter(labelDim, 1)                                                                                         \n"
    L"       //  output                                                                                                         \n"
    L"       topHiddenLayer = layers[numHiddenLayers]                                                                           \n"
    L"       centerT = Floor(T/2)                                                                                               \n"
    L"       z = W_fwd * topHiddenLayer.h_fwd[centerT] + W_bwd * topHiddenLayer.h_bwd[centerT] + b                              \n"
    L"   ]                                                                                                                      \n"
    L"   outZ = outLayer.z     // we only want this one & don't care about the rest of this dictionary                          \n"
    L"                                                                                                                          \n"
    L"   // define criterion nodes                                                                                              \n"
    L"   CE = CrossEntropyWithSoftmax(myLabels, outZ)                                                                           \n"
    L"   Err = ErrorPrediction(myLabels, outZ)                                                                                  \n"
    L"                                                                                                                          \n"
    L"   // define output node for decoding                                                                                     \n"
    L"   logPrior = LogPrior(myLabels)                                                                                          \n"
    L"   ScaledLogLikelihood = outZ - logPrior   // before: Minus(CE.BFF.FF.P,logPrior,tag=Output)                              \n"
    L"]\n"
    L"",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" val =\n"
    L"  new NDLComputationNetwork\n"
    L"   []\n"
    L"    CE =\n"
    L"     (\n"
    L"      CrossEntropyWithSoftmax\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    Err =\n"
    L"     (\n"
    L"      ErrorPrediction\n"
    L"      ()\n"
    L"       myLabels\n"
    L"       outZ\n"
    L"\n"
    L"\n"
    L"    ScaledLogLikelihood =\n"
    L"     -\n"
    L"      outZ\n"
    L"      logPrior\n"
    L"\n"
    L"    T =\n"
    L"     3\n"
    L"    featDim =\n"
    L"     40\n"
    L"    hiddenDim =\n"
    L"     512\n"
    L"    labelDim =\n"
    L"     9000\n"
    L"    layers =\n"
    L"     array \n"
    L"      1\n"
    L"      numHiddenLayers\n"
    L"      =>\n"
    L"       ()\n"
    L"        layer\n"
    L"\n"
    L"       []\n"
    L"        H_bwd =\n"
    L"         (\n"
    L"          Parameter\n"
    L"          ()\n"
    L"           hiddenDim\n"
    L"           hiddenDim\n"
    L"\n"
    L"\n"
    L"        H_fwd =\n"
    L"         (\n"
    L"          Parameter\n"
    L"          ()\n"
    L"           hiddenDim\n"
    L"           hiddenDim\n"
    L"\n"
    L"\n"
    L"        W_bwd =\n"
    L"         if\n"
    L"          >\n"
    L"           layer\n"
    L"           1\n"
    L"\n"
    L"          (\n"
    L"           Parameter\n"
    L"           ()\n"
    L"            hiddenDim\n"
    L"            hiddenDim\n"
    L"\n"
    L"\n"
    L"          (\n"
    L"           Fail\n"
    L"           ()\n"
    L"            'no W_bwd'\n"
    L"\n"
    L"\n"
    L"\n"
    L"        W_fwd =\n"
    L"         (\n"
    L"          Parameter\n"
    L"          ()\n"
    L"           hiddenDim\n"
    L"           featDim\n"
    L"\n"
    L"\n"
    L"        b =\n"
    L"         (\n"
    L"          Parameter\n"
    L"          ()\n"
    L"           hiddenDim\n"
    L"           1\n"
    L"\n"
    L"\n"
    L"        h_bwd =\n"
    L"         array \n"
    L"          0\n"
    L"          -\n"
    L"           T\n"
    L"           1\n"
    L"\n"
    L"          =>\n"
    L"           ()\n"
    L"            t\n"
    L"\n"
    L"           (\n"
    L"            step\n"
    L"            ()\n"
    L"             H_bwd\n"
    L"             h_bwd\n"
    L"             1\n"
    L"             t\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"        h_fwd =\n"
    L"         array \n"
    L"          0\n"
    L"          -\n"
    L"           T\n"
    L"           1\n"
    L"\n"
    L"          =>\n"
    L"           ()\n"
    L"            t\n"
    L"\n"
    L"           (\n"
    L"            step\n"
    L"            ()\n"
    L"             H_fwd\n"
    L"             h_fwd\n"
    L"             -(\n"
    L"              1\n"
    L"\n"
    L"             t\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"        step =\n"
    L"         =>\n"
    L"          ()\n"
    L"           H\n"
    L"           h\n"
    L"           dt\n"
    L"           t\n"
    L"\n"
    L"          (\n"
    L"           Sigmoid\n"
    L"           ()\n"
    L"            if\n"
    L"             &&\n"
    L"              >=\n"
    L"               +\n"
    L"                t\n"
    L"                dt\n"
    L"\n"
    L"               0\n"
    L"\n"
    L"              <\n"
    L"               +\n"
    L"                t\n"
    L"                dt\n"
    L"\n"
    L"               T\n"
    L"\n"
    L"\n"
    L"             +\n"
    L"              [\n"
    L"               z_shared\n"
    L"               t\n"
    L"\n"
    L"              *\n"
    L"               H\n"
    L"               [\n"
    L"                h\n"
    L"                +\n"
    L"                 t\n"
    L"                 dt\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"             [\n"
    L"              z_shared\n"
    L"              t\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"        z_shared =\n"
    L"         array \n"
    L"          0\n"
    L"          -\n"
    L"           T\n"
    L"           1\n"
    L"\n"
    L"          =>\n"
    L"           ()\n"
    L"            t\n"
    L"\n"
    L"           +\n"
    L"            if\n"
    L"             >\n"
    L"              layer\n"
    L"              1\n"
    L"\n"
    L"             +\n"
    L"              *\n"
    L"               W_fwd\n"
    L"               [\n"
    L"                . h_fwd\n"
    L"                 [\n"
    L"                  layers\n"
    L"                  -\n"
    L"                   layer\n"
    L"                   1\n"
    L"\n"
    L"\n"
    L"\n"
    L"                t\n"
    L"\n"
    L"\n"
    L"              *\n"
    L"               W_bwd\n"
    L"               [\n"
    L"                . h_bwd\n"
    L"                 [\n"
    L"                  layers\n"
    L"                  -\n"
    L"                   layer\n"
    L"                   1\n"
    L"\n"
    L"\n"
    L"\n"
    L"                t\n"
    L"\n"
    L"\n"
    L"\n"
    L"             *\n"
    L"              W_fwd\n"
    L"              [\n"
    L"               subframes\n"
    L"               t\n"
    L"\n"
    L"\n"
    L"\n"
    L"            b\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"    logPrior =\n"
    L"     (\n"
    L"      LogPrior\n"
    L"      ()\n"
    L"       myLabels\n"
    L"\n"
    L"\n"
    L"    myFeatures =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       featDim\n"
    L"\n"
    L"\n"
    L"    myLabels =\n"
    L"     (\n"
    L"      Input\n"
    L"      ()\n"
    L"       labelDim\n"
    L"\n"
    L"\n"
    L"    numHiddenLayers =\n"
    L"     2\n"
    L"    outLayer =\n"
    L"     []\n"
    L"      W_bwd =\n"
    L"       (\n"
    L"        Parameter\n"
    L"        ()\n"
    L"         labelDim\n"
    L"         hiddenDim\n"
    L"\n"
    L"\n"
    L"      W_fwd =\n"
    L"       (\n"
    L"        Parameter\n"
    L"        ()\n"
    L"         labelDim\n"
    L"         hiddenDim\n"
    L"\n"
    L"\n"
    L"      b =\n"
    L"       (\n"
    L"        Parameter\n"
    L"        ()\n"
    L"         labelDim\n"
    L"         1\n"
    L"\n"
    L"\n"
    L"      centerT =\n"
    L"       (\n"
    L"        Floor\n"
    L"        ()\n"
    L"         /\n"
    L"          T\n"
    L"          2\n"
    L"\n"
    L"\n"
    L"\n"
    L"      topHiddenLayer =\n"
    L"       [\n"
    L"        layers\n"
    L"        numHiddenLayers\n"
    L"\n"
    L"      z =\n"
    L"       +\n"
    L"        +\n"
    L"         *\n"
    L"          W_fwd\n"
    L"          [\n"
    L"           . h_fwd\n"
    L"            topHiddenLayer\n"
    L"\n"
    L"           centerT\n"
    L"\n"
    L"\n"
    L"         *\n"
    L"          W_bwd\n"
    L"          [\n"
    L"           . h_bwd\n"
    L"            topHiddenLayer\n"
    L"\n"
    L"           centerT\n"
    L"\n"
    L"\n"
    L"\n"
    L"        b\n"
    L"\n"
    L"\n"
    L"    outZ =\n"
    L"     . z\n"
    L"      outLayer\n"
    L"\n"
    L"    subframes =\n"
    L"     array \n"
    L"      0\n"
    L"      -\n"
    L"       T\n"
    L"       1\n"
    L"\n"
    L"      =>\n"
    L"       ()\n"
    L"        t\n"
    L"\n"
    L"       (\n"
    L"        RowSlice\n"
    L"        ()\n"
    L"         *\n"
    L"          t\n"
    L"          featDim\n"
    L"\n"
    L"         featDim\n"
    L"         myFeatures\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(L" \n"
    L"" // this fails because dict is outside val; expression name is not local to it
    L"do = Print(val) \n"
    L"dict = [ outY = Input(13) ] ; val = new NDLComputationNetwork [ outZ = dict.outY \n"
    L"]\n"
    L"",
    L" []\n"
    L" dict =\n"
    L"  []\n"
    L"   outY =\n"
    L"    (\n"
    L"     Input\n"
    L"     ()\n"
    L"      13\n"
    L"\n"
    L"\n"
    L"\n"
    L" do =\n"
    L"  (\n"
    L"   Print\n"
    L"   ()\n"
    L"    val\n"
    L"\n"
    L"\n"
    L" val =\n"
    L"  new NDLComputationNetwork\n"
    L"   []\n"
    L"    outZ =\n"
    L"     . outY\n"
    L"      dict\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L""),
    std::make_pair(L"f(x,option='default') = Print(option); do = f(42,option='value')",
    L" []\n"
    L" do =\n"
    L"  (\n"
    L"   f\n"
    L"   ()\n"
    L"    42\n"
    L"\n"
    L"    option =\n"
    L"     'value'\n"
    L"\n"
    L"\n"
    L" f =\n"
    L"  =>\n"
    L"   ()\n"
    L"    x\n"
    L"\n"
    L"    option =\n"
    L"     'default'\n"
    L"\n"
    L"   (\n"
    L"    Print\n"
    L"    ()\n"
    L"     option\n"
    L"\n"
    L"\n"
    L"\n"
    L"\n"
    L"")
};